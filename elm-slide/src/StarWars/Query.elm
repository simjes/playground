-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module StarWars.Query exposing (AllFilmsOptionalArguments, AllPeopleOptionalArguments, AllPlanetsOptionalArguments, AllSpeciesOptionalArguments, AllStarshipsOptionalArguments, AllVehiclesOptionalArguments, FilmOptionalArguments, NodeRequiredArguments, PersonOptionalArguments, PlanetOptionalArguments, SpeciesOptionalArguments, StarshipOptionalArguments, VehicleOptionalArguments, allFilms, allPeople, allPlanets, allSpecies, allStarships, allVehicles, film, node, person, planet, species, starship, vehicle)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import StarWars.InputObject
import StarWars.Interface
import StarWars.Object
import StarWars.Scalar
import StarWars.ScalarCodecs
import StarWars.Union


type alias AllFilmsOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


allFilms : (AllFilmsOptionalArguments -> AllFilmsOptionalArguments) -> SelectionSet decodesTo StarWars.Object.FilmsConnection -> SelectionSet (Maybe decodesTo) RootQuery
allFilms fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allFilms" optionalArgs object_ (identity >> Decode.nullable)


type alias FilmOptionalArguments =
    { id : OptionalArgument StarWars.ScalarCodecs.Id
    , filmID : OptionalArgument StarWars.ScalarCodecs.Id
    }


film : (FilmOptionalArguments -> FilmOptionalArguments) -> SelectionSet decodesTo StarWars.Object.Film -> SelectionSet (Maybe decodesTo) RootQuery
film fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, filmID = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId), Argument.optional "filmID" filledInOptionals.filmID (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "film" optionalArgs object_ (identity >> Decode.nullable)


type alias AllPeopleOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


allPeople : (AllPeopleOptionalArguments -> AllPeopleOptionalArguments) -> SelectionSet decodesTo StarWars.Object.PeopleConnection -> SelectionSet (Maybe decodesTo) RootQuery
allPeople fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allPeople" optionalArgs object_ (identity >> Decode.nullable)


type alias PersonOptionalArguments =
    { id : OptionalArgument StarWars.ScalarCodecs.Id
    , personID : OptionalArgument StarWars.ScalarCodecs.Id
    }


person : (PersonOptionalArguments -> PersonOptionalArguments) -> SelectionSet decodesTo StarWars.Object.Person -> SelectionSet (Maybe decodesTo) RootQuery
person fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, personID = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId), Argument.optional "personID" filledInOptionals.personID (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "person" optionalArgs object_ (identity >> Decode.nullable)


type alias AllPlanetsOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


allPlanets : (AllPlanetsOptionalArguments -> AllPlanetsOptionalArguments) -> SelectionSet decodesTo StarWars.Object.PlanetsConnection -> SelectionSet (Maybe decodesTo) RootQuery
allPlanets fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allPlanets" optionalArgs object_ (identity >> Decode.nullable)


type alias PlanetOptionalArguments =
    { id : OptionalArgument StarWars.ScalarCodecs.Id
    , planetID : OptionalArgument StarWars.ScalarCodecs.Id
    }


planet : (PlanetOptionalArguments -> PlanetOptionalArguments) -> SelectionSet decodesTo StarWars.Object.Planet -> SelectionSet (Maybe decodesTo) RootQuery
planet fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, planetID = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId), Argument.optional "planetID" filledInOptionals.planetID (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "planet" optionalArgs object_ (identity >> Decode.nullable)


type alias AllSpeciesOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


allSpecies : (AllSpeciesOptionalArguments -> AllSpeciesOptionalArguments) -> SelectionSet decodesTo StarWars.Object.SpeciesConnection -> SelectionSet (Maybe decodesTo) RootQuery
allSpecies fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allSpecies" optionalArgs object_ (identity >> Decode.nullable)


type alias SpeciesOptionalArguments =
    { id : OptionalArgument StarWars.ScalarCodecs.Id
    , speciesID : OptionalArgument StarWars.ScalarCodecs.Id
    }


species : (SpeciesOptionalArguments -> SpeciesOptionalArguments) -> SelectionSet decodesTo StarWars.Object.Species -> SelectionSet (Maybe decodesTo) RootQuery
species fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, speciesID = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId), Argument.optional "speciesID" filledInOptionals.speciesID (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "species" optionalArgs object_ (identity >> Decode.nullable)


type alias AllStarshipsOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


allStarships : (AllStarshipsOptionalArguments -> AllStarshipsOptionalArguments) -> SelectionSet decodesTo StarWars.Object.StarshipsConnection -> SelectionSet (Maybe decodesTo) RootQuery
allStarships fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allStarships" optionalArgs object_ (identity >> Decode.nullable)


type alias StarshipOptionalArguments =
    { id : OptionalArgument StarWars.ScalarCodecs.Id
    , starshipID : OptionalArgument StarWars.ScalarCodecs.Id
    }


starship : (StarshipOptionalArguments -> StarshipOptionalArguments) -> SelectionSet decodesTo StarWars.Object.Starship -> SelectionSet (Maybe decodesTo) RootQuery
starship fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, starshipID = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId), Argument.optional "starshipID" filledInOptionals.starshipID (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "starship" optionalArgs object_ (identity >> Decode.nullable)


type alias AllVehiclesOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


allVehicles : (AllVehiclesOptionalArguments -> AllVehiclesOptionalArguments) -> SelectionSet decodesTo StarWars.Object.VehiclesConnection -> SelectionSet (Maybe decodesTo) RootQuery
allVehicles fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allVehicles" optionalArgs object_ (identity >> Decode.nullable)


type alias VehicleOptionalArguments =
    { id : OptionalArgument StarWars.ScalarCodecs.Id
    , vehicleID : OptionalArgument StarWars.ScalarCodecs.Id
    }


vehicle : (VehicleOptionalArguments -> VehicleOptionalArguments) -> SelectionSet decodesTo StarWars.Object.Vehicle -> SelectionSet (Maybe decodesTo) RootQuery
vehicle fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, vehicleID = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId), Argument.optional "vehicleID" filledInOptionals.vehicleID (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "vehicle" optionalArgs object_ (identity >> Decode.nullable)


type alias NodeRequiredArguments =
    { id : StarWars.ScalarCodecs.Id }


{-| Fetches an object given its ID

  - id - The ID of an object

-}
node : NodeRequiredArguments -> SelectionSet decodesTo StarWars.Interface.Node -> SelectionSet (Maybe decodesTo) RootQuery
node requiredArgs object_ =
    Object.selectionForCompositeField "node" [ Argument.required "id" requiredArgs.id (StarWars.ScalarCodecs.codecs |> StarWars.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
